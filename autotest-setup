#!/usr/bin/python3

import sys
import os
import os.path
from os.path import expanduser
import subprocess
import json
#import getpass
import boto3
import botocore
import traceback

PATH_TO_CREDENTIALS_DIR = expanduser("~") + "/.6172_cloud"
PATH_TO_CREDENTIALS = PATH_TO_CREDENTIALS_DIR+"/p4_cloud_credentials.pobj"

# Server for getting list of binaries.
list_server = "ec2-54-165-84-30.compute-1.amazonaws.com:4040"

# Define ANSI escape sequences.
class ansi_esc:
  RESET     = '\033[0m'
  BOLD      = '\033[1m'
  UNDERLINE = '\033[4m'
  RED       = '\033[31m'
  GREEN     = '\033[32m'
  YELLOW    = '\033[33m'
  BLUE      = '\033[34m'
  MAGENTA   = '\033[35m'
  CYAN      = '\033[36m'


# Define wrappers for ANSI escape sequences.
def term_bold(s):
  return ansi_esc.BOLD      + s + ansi_esc.RESET
def term_underline(s):
  return ansi_esc.UNDERLINE + s + ansi_esc.RESET
def term_red(s):
  return ansi_esc.RED       + s + ansi_esc.RESET
def term_green(s):
  return ansi_esc.GREEN     + s + ansi_esc.RESET
def term_yellow(s):
  return ansi_esc.YELLOW    + s + ansi_esc.RESET
def term_blue(s):
  return ansi_esc.BLUE      + s + ansi_esc.RESET
def term_magenta(s):
  return ansi_esc.MAGENTA   + s + ansi_esc.RESET
def term_cyan(s):
  return ansi_esc.CYAN      + s + ansi_esc.RESET


if __name__ == "__main__":
  # Give basic calling convention if requested.
  if len(sys.argv) != 3:
    sys.stderr.write("Usage: {0} <kerberos_id> <token>\n".format(os.path.basename(__file__)))
    sys.stderr.write("Get access key (<kerberos_id> <token>) by going to http://scrimmage.csail.mit.edu/autotest_access_key\n")
    exit(1)
  print("Sending request for autotest cloud credentials")
  try:
    response = subprocess.check_output(
      "wget -q -O - '{}/get_autotest_credentials/{}/{}'".format(
        list_server,
        sys.argv[1],
        sys.argv[2]),
      shell = True, universal_newlines=True)
  except subprocess.CalledProcessError:
    traceback.print_exc(1)
    exit(term_red(
      "[ERROR] Cannot contact list server '{}'.".format(list_server)
    ))

  # Parse the list of binaries out of the response.
  response = response.strip()
  response_parsed = response.split(':', 1)
  if len(response_parsed) != 2 or response_parsed[0] != "CREDENTIALS":
    exit(term_red(
      "[SERVER ERROR] {}.".format(response)
    ))
  else:
    try:
      creds = eval(response_parsed[1])
      if not os.path.exists(PATH_TO_CREDENTIALS_DIR): 
        os.makedirs(PATH_TO_CREDENTIALS_DIR, exist_ok=True)
      print(PATH_TO_CREDENTIALS)
      with open(PATH_TO_CREDENTIALS, 'w+') as f:
          f.write(str(creds))
      print(term_green("Credentials successfully stored at " + PATH_TO_CREDENTIALS))
    except:
      exit(term_red(
        "[CLIENT ERROR] Error parsing and storing credentials {}.".format(response)
      ))
    exit(0)
