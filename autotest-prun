#!/usr/bin/python3

import sys
import os
import os.path
import subprocess
import time
#import getpass
import boto3
from boto3 import Session
import botocore
import traceback
import datetime
import random

from os.path import expanduser
PATH_TO_CREDENTIALS_DIR = expanduser("~") + "/.6172_cloud"
PATH_TO_CREDENTIALS = PATH_TO_CREDENTIALS_DIR+"/p4_cloud_credentials.pobj"
def get_credentials():
  credentials = eval(open(PATH_TO_CREDENTIALS).read())
  return credentials
global_credentials = get_credentials()
def getuser():
  return global_credentials["USERNAME"]
def get_aws_id():
  return global_credentials["ID"]
def get_aws_secret():
  return global_credentials["SECRET"]


# Amazon S3 bucket name.
student_bucket = "6172-test-filesystem"

# Key prefix for user folders in bucket.
object_key_prefix = "userhome"

# Key folder for game lists to be tested.
object_key_tests = "autotest_test_uploads"

# Server for submitting autotests.
submit_server = "http://ec2-54-165-84-30.compute-1.amazonaws.com:4040"

admins = ["sfraser", "sev", "graceyin", "hmhe", "nistath", "endrias", "tfk", "r_rahman"]

STAFF_BOT_NAMES = ["reference", "referencex2", "referencex4", "reference_plus", "reference_plusx2", "reference_plusx4"]


def round_robin(players, time_control, rounds, username):
  #if False:
  #if username not in admins: # , "endrias", "damianb"]:
  #print "Serial autotesting is no longer available."
  #  print term_red("Serial autotesting is offline for grading and will be available again in about 24 hours.")
  #  quit()

  if username not in admins and len(players)*(len(players)-1)*rounds > 800 and time_control == "blitz":
    print("You tried to run a test with " + str(len(players)*(len(players)-1)*rounds) + " games. 800 is the maximum for blitz games")
    exit(1)

  if username not in admins and len(players)*(len(players)-1)*rounds > 400 and time_control == "blitz2":
    print("You tried to run a test with " + str(len(players)*(len(players)-1)*rounds) + " games. 400 is the maximum for blitz2 games")
    exit(1)

  if username not in admins and len(players)*(len(players)-1)*rounds > 400 and time_control == "regular2":
    print("You tried to run a test with " + str(len(players)*(len(players)-1)*rounds) + " games. 400 is the maximum for regular2 games")
    exit(1)


  if username not in admins and len(players)*(len(players)-1)*rounds > 400 and time_control == "regular":
    print("You tried to run a test with " + str(len(players)*(len(players)-1)*rounds) + " games. 400 is the maximum for regular games")
    exit(1)
  if len(players)*(len(players)-1)*rounds > 40 and time_control == "long":
    print("You tried to run a test with " + str(len(players)*(len(players)-1)*rounds) + " games. 40 is the maximum for long games")
    exit(1)
  if time_control not in ["blitz", "regular", "long", "blitz2", "regular2"]:
    print("Invalid option for time control. Must be in {blitz, regular, long}")
    exit(1)

  if time_control == "blitz":
    tc_inc = 0.5
    tc_pool = 60

  if time_control == "blitz2":
    tc_inc = 1.0
    tc_pool = 60

  if time_control == "regular":
    tc_inc = 2
    tc_pool = 120

  if time_control == "regular2":
    tc_inc = 1
    tc_pool = 180

  if time_control == "long":
    tc_inc = 10
    tc_pool = 480

  pipe = subprocess.Popen(['autotest-list', '10000'], stdout = subprocess.PIPE, universal_newlines=True)
  current_binary_list = pipe.communicate()[0]
  uploaded_binary_list = []
  for x in current_binary_list.split('\n'):
    player = x.split(' ')
    if player[0].startswith(username):
      uploaded_binary_list.append(player[0])
  print(current_binary_list)
  print(uploaded_binary_list)
  for p in players:
    if p in STAFF_BOT_NAMES:
      continue
    if username+"."+p not in uploaded_binary_list:
      print("[Error] The player wasn't uploaded " + p)
      exit(1)

  round_robin_rounds = rounds
 
  # No need to modify anything below this line.
  autotest_filename = 'tmp.6172_autotest-'+str(random.uniform(0,10000))
  f = open(autotest_filename, 'w')
  f.write("***Manual Game List*** ***PARALLEL***\n")
  f.write(username+".\n") # not the droids you're looking for
  # schedule round robin round.
  for i in range(round_robin_rounds):
    for p1 in players:
      for p2 in players:
        if p1 == p2:
          continue
        #if p1.find("referencex") == -1 and p2.find("referencex") == -1:
        #  continue
        #p1 = username+"."+p1
        #p2 = username+"."+p2
        if p1 not in STAFF_BOT_NAMES:
          tmp_p1 = username+"."+str(p1)
        else:
          tmp_p1 = p1
        if p2 not in STAFF_BOT_NAMES:
          tmp_p2 = username+"."+str(p2)
        else:
          tmp_p2 = p2

        p1_mul = 1.0;
        p2_mul = 1.0;
        if p1.endswith("x2"):
          p1_mul = 2.0;
        if p2.endswith("x2"):
          p2_mul = 2.0;

        if p1.endswith("x4"):
          p1_mul = 4.0;
        if p2.endswith("x4"):
          p2_mul = 4.0;

        f.write(str(tmp_p1) + " " + str(tmp_p2) + " " + str(int(tc_pool*p1_mul)) + " " + str(tc_inc*p1_mul)+" true "+str(int(tc_pool*p2_mul))+" "+str(tc_inc*p2_mul)+"\n")
  f.close()
  subprocess.call(['autotest-lowlevelrun', autotest_filename], universal_newlines=True)

# Define ANSI escape sequences.
class ansi_esc:
  RESET     = '\033[0m'
  BOLD      = '\033[1m'
  UNDERLINE = '\033[4m'
  RED       = '\033[31m'
  GREEN     = '\033[32m'
  YELLOW    = '\033[33m'
  BLUE      = '\033[34m'
  MAGENTA   = '\033[35m'
  CYAN      = '\033[36m'


# Define wrappers for ANSI escape sequences.
def term_bold(s):
  return ansi_esc.BOLD      + s + ansi_esc.RESET
def term_underline(s):
  return ansi_esc.UNDERLINE + s + ansi_esc.RESET
def term_red(s):
  return ansi_esc.RED       + s + ansi_esc.RESET
def term_green(s):
  return ansi_esc.GREEN     + s + ansi_esc.RESET
def term_yellow(s):
  return ansi_esc.YELLOW    + s + ansi_esc.RESET
def term_blue(s):
  return ansi_esc.BLUE      + s + ansi_esc.RESET
def term_magenta(s):
  return ansi_esc.MAGENTA   + s + ansi_esc.RESET
def term_cyan(s):
  return ansi_esc.CYAN      + s + ansi_esc.RESET

def process_players(player_list, username):
  print("Uploading players")

  pipe = subprocess.Popen(['autotest-list', '10000'], stdout=subprocess.PIPE, universal_newlines=True)

  current_binary_list = pipe.communicate()[0]
  uploaded_binary_list = []
  for x in current_binary_list.split('\n'):
    player = x.split(' ')
    if player[0].startswith(username):
      uploaded_binary_list.append(player[0])
  print("Uploaded binary list: " + str(uploaded_binary_list))
  for p in player_list:
    if p in ["reference_plusplus", "reference"]: #"reference_plus", "reference_plusplus", "reference", "reference_pluser", "reference_pluser2"]:
      print(term_yellow("[Notice] Binary not uploaded, using reference bot: " + str(p)))
      continue
    if username+"."+p.split('/')[-1] in uploaded_binary_list:
      print(term_yellow("[Notice] " + str(p) + " has already been uploaded. Please rename this binary if it differs from the previously uploaded version."))
    else:
      subprocess.call(['autotest-upload', p], universal_newlines=True)

def automatic_game():
  print("automatic")
  type = sys.argv[1]
  round_robin_rounds = int(sys.argv[2])
  print("type is " + str(type))
  print(sys.argv[3:])
  process_players(sys.argv[3:], getuser())
  round_robin(sys.argv[3:], type, round_robin_rounds, getuser())

if __name__ == "__main__":
  if len(sys.argv) == 1:
    sys.stderr.write("Usage: autotest-prun {blitz,regular,long} num_games player1 player2 player3 ...\n")
    exit(1)
  automatic_game()
  exit()
  # Give basic calling convention if requested.
  if len(sys.argv) != 2 or sys.argv[1] == "-h" or sys.argv[1] == "--help":
    sys.stderr.write("Usage: {0} GAME_LIST_PATH\n".format(os.path.basename(__file__)))
    exit(1)

  session = Session(aws_access_key_id = get_aws_id(), aws_secret_access_key = get_aws_secret(), region_name="us-east-1")

  # Read the argument.
  game_list_path = sys.argv[1]

  # Check for path existence.
  try:
    if not os.path.exists(game_list_path):
      exit(term_red(
        "[ERROR] Path '{}' does not exist.".format(game_list_path)
      ))
    if not os.path.isfile(game_list_path):
      exit(term_red(
        "[ERROR] Path '{}' is not a file.".format(game_list_path)
      ))
  except OSError:
    traceback.print_exc(1)
    exit(term_red(
      "[ERROR] Cannot test path '{}' for existence.".format(game_list_path)
    ))

  # Get the game list's basename.
  try:
    game_list_basename = os.path.basename(game_list_path)
  except OSError:
    traceback.print_exc(1)
    exit(term_red(
      "[ERROR] Cannot get basename for path '{}'.".format(game_list_path)
    ))

  # Fetch the bucket.
  s3 = session.resource('s3')
  #s3 = boto3.resource('s3')
  bucket = s3.Bucket(student_bucket)

  # Test for bucket existence.
  try:
    s3.meta.client.head_bucket(Bucket = student_bucket)
  except botocore.exceptions.ClientError as e:
    error_code = int(e.response["Error"]["Code"])
    if error_code == 404:
      exit(term_red(
        "[ERROR] Amazon S3 Bucket '{}' doesn't exist.".format(student_bucket)
      ))
    else:
      traceback.print_exc(1)
      exit(term_red(
        "[ERROR] Cannot get Amazon S3 bucket."
      ))

  # Generate student's Amazon IAM username (on staff's account).
  try:
    athena_user = str(getuser())
    iam_user = "student-" + athena_user
  except Exception:
    traceback.print_exc(1)
    exit(term_red(
      "[ERROR] Cannot get login name."
    ))

  # Upload the game list to the student bucket.
  s3_client = session.client('s3')
  upload_key = "/".join([
    object_key_prefix,
    iam_user,
    object_key_tests, 
    game_list_basename
  ])
  print("upload key " + upload_key)
  print("student bucket " + student_bucket)
  print("Uploading game list '{}' to '~/s3home/{}/{}' on instance...".format(
    game_list_basename, object_key_tests, game_list_basename))
  try:
    s3_client.upload_file(
      game_list_path, 
      student_bucket,
      upload_key,
      ExtraArgs = {
        "ACL": "bucket-owner-full-control"
      }
    )
  except Exception:
    traceback.print_exc(1)
    exit(term_red(
      "[ERROR] Cannot upload game list to Amazon S3 bucket."
    ))

  # Echo upload completion.
  print(term_green("Upload complete!"))

  # Submit the game list to the server.
  print("Submitting autotest with game list '{}' to the server...".format(game_list_basename))
  try:
    response = subprocess.check_output(
      "wget -q -O - '{}/autotest/{}/{}'".format(
        submit_server,
        game_list_basename.replace("'", "'\"'\"'"), 
        athena_user),
      shell = True, universal_newlines=True)
  except subprocess.CalledProcessError:
    traceback.print_exc(1)
    exit(term_red(
      "[ERROR] Cannot contact submission server '{}'.".format(submit_server)
    ))

  # Check response for autotest ID.
  response = response.strip()
  response_parsed = response.split(':')
  if len(response_parsed) != 2 or response_parsed[0] != 'AUTOTEST_ID':
    exit(term_red(
      "[SERVER ERROR] {}.".format(response)
    ))
  else:
    autotest_id = response_parsed[1]
    print(term_green(
      "Submission success! Autotest ID is {}.".format(autotest_id)
    ))

  # Check status of submission until it has started.
  print("Polling status of autotest...")
  poll_count = 0
  timeout = 2
  while True:
    # Echo the poll count (with no trailing newline)
    poll_count += 1
    print("POLL {}:".format(poll_count), end=' ')

    # Poll the server about the status.
    try:
      response = subprocess.check_output(
        "wget -q -O - '{}/at_status/{}'".format(
          submit_server,
          autotest_id),
        shell = True, universal_newlines=True)
    except subprocess.CalledProcessError:
      print(term_yellow(
        "\rPOLL {}: ".format(poll_count) + \
        "[WARNING] Cannot contact status server '{}'.".format(submit_server)
      ))
      time.sleep(timeout)
      continue
    
    # Parse the response and re-poll on non-fatal error.
    response = response.strip()
    response_parsed = response.split(':', 2)
    if response_parsed[0] != 'Autotest Status':
      if len(response):
        print(term_yellow(
          "\rPOLL {}: ".format(poll_count) + \
          "[SERVER WARNING] {}.".format(response)
        ))
      else:
        print("Re-polling in {} seconds...".format(timeout))
      time.sleep(timeout)
      continue
    
    # Quit on fatal error.
    if response_parsed[1] == "ERROR":
      exit(term_red(
        "\rPOLL {}: ".format(poll_count) + \
        "[SERVER ERROR] {}.".format(response_parsed[2])
      ))

    # Echo URL on success.
    if response_parsed[1] == "STARTED":
      print(term_green(
        "\rPOLL {}: ".format(poll_count) + \
        "Autotest started! View it running at " + \
        "http://scrimmage.csail.mit.edu/autotest?autoid={}".format(autotest_id)
      ))
      break
